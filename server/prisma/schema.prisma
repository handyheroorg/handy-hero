generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
  SERVICE_PROVIDER
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  fullName     String
  email        String  @unique
  mobileNumber String
  country      String
  avatar       String?
  role         Role
  password     String

  location Location?
  // Each SERVICE_PROVIDER will have their own profile
  profile  ServiceProviderProfile?

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  feedbacks           Feedback[]    @relation(name: "FeedbacksGiven")
  chatRequestCreated  ChatRequest[] @relation(name: "ChatRequestCreated")
  chatRequestReceived ChatRequest[] @relation(name: "ChatRequestReceived")
  clientChatRooms     ChatRoom[]    @relation(name: "ClientChatRoom")
  providerChatRooms   ChatRoom[]    @relation(name: "ProviderChatRoom")
  messages            Message[]
  contractsAwarded    Contract[]    @relation(name: "ContractAwarded")
  contractsReceived   Contract[]    @relation(name: "ContractReceived")
}

model Location {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  latitude  Float
  longitude Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExperienceLevel {
  ENTRY
  INTERMEDIATE
  EXPERT
}

model ServiceProviderProfile {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  occupation      String?
  about           String?
  fullAddress     String?
  experienceLevel ExperienceLevel?
  languages       String[]         @default([])
  skills          String[]         @default([])
  education       Json[]           @default([])
  experience      Json[]           @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships ü§ù 
  services  Service[]
  feedbacks Feedback[]
}

enum ServicePriceType {
  HOURLY
  FIXED
}

model Service {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  profile   ServiceProviderProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String                 @db.ObjectId

  name        String
  description String?
  thumbnail   String?
  skills      String[]

  price     Float
  priceType ServicePriceType
  maxHours  Float? // in case if priceType is HOURLY

  feedbacks    Feedback[]
  chatRequests ChatRequest[]
  chatRooms    ChatRoom[]
  contracts    Contract[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name, description])
}

model Feedback {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Feedback given to 
  profile   ServiceProviderProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String                 @db.ObjectId

  // Feedback given by
  client   User   @relation(name: "FeedbacksGiven", fields: [clientId], references: [id], onDelete: Cascade)
  clientId String @db.ObjectId

  // On which service the feedback is given
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String  @db.ObjectId

  content String
  rating  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Only one feedback is allowed by client on a service
  @@unique([clientId, serviceId])
}

enum BadgeType {
  CLIENT
  SERVICE_PROVIDER
}

model Badge {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String    @unique
  icon        String
  description String
  type        BadgeType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChatRequestStatus {
  PENDING
  REJECTED
  ACCEPTED
}

model ChatRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  status ChatRequestStatus @default(PENDING)

  client   User   @relation(name: "ChatRequestCreated", fields: [clientId], references: [id], onDelete: Cascade)
  clientId String @db.ObjectId

  serviceProvider   User   @relation(name: "ChatRequestReceived", fields: [serviceProviderId], references: [id], onDelete: Cascade)
  serviceProviderId String @db.ObjectId

  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChatRoomStatus {
  IN_PROGESS
  CLOSED
}

model ChatRoom {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  status   ChatRoomStatus @default(IN_PROGESS)
  messages Message[]

  client   User   @relation(name: "ClientChatRoom", fields: [clientId], references: [id])
  clientId String @db.ObjectId

  provider   User   @relation(name: "ProviderChatRoom", fields: [providerId], references: [id])
  providerId String @db.ObjectId

  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String  @db.ObjectId

  contractProposal ContractProposal?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clientId, providerId, serviceId])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String
  seen    Boolean @default(false)

  sentBy   User   @relation(fields: [sentById], references: [id], onDelete: Cascade)
  sentById String @db.ObjectId

  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ContractProposal {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  status       ProposalStatus @default(PENDING)
  // Amount on which the final proposal is settled b/w client and servie provider
  settledPrice Float

  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId String   @unique @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ContractStatus {
  ON_GOING
  COMPLETED
}

model Contract {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  client   User   @relation(name: "ContractAwarded", fields: [clientId], references: [id])
  clientId String @db.ObjectId

  serviceProvider   User   @relation(name: "ContractReceived", fields: [serviceProviderId], references: [id])
  serviceProviderId String @db.ObjectId

  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String  @db.ObjectId

  status       ContractStatus @default(ON_GOING)
  settledPrice Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
